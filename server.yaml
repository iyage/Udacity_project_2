Description: A cloudformation script to create servers

Parameters:
  EnvironmentName:
    Description: Name to fix to project
    Type: String
  Amid:
    Type: String
    Default:  ami-09d56f8956ab235b3
    
Resources:
  LBSECG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: secGA
      GroupDescription: load balancer for the private subnet
      VpcId: 
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name 
          Value: !Sub "${EnvironmentName} loudbalancer"
  webServerSecG:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupName: secGB
        GroupDescription: security group for public server
        VpcId:
          Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort:   8080
            ToPort: 8080
            CidrIp: 0.0.0.0/0
          - IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: 0.0.0.0/0

        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0

    
  WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - Fn::ImportValue: 
              !Sub  "${EnvironmentName}-PRIV-SN"
          LaunchConfigurationName:
            Ref: webAppLaunchConfig
          MinSize: '2'
          MaxSize: '4'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup

  WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - Fn::ImportValue: !Sub  "${EnvironmentName}-PUB-SN1" 
          - Fn::ImportValue: !Sub "${EnvironmentName}-PUB-SN2" 
          SecurityGroups:  
            - Ref: LBSECG
  Listener:
        Type: AWS::ElasticLoadBalancingV2::Listener
        Properties:
          DefaultActions:
          - Type: forward
            TargetGroupArn:
              Ref: WebAppTargetGroup
          LoadBalancerArn:
            Ref: WebAppLB
          Port: '80'
          Protocol: HTTP
  ALBListenerRule:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref WebAppTargetGroup
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref  Listener
            Priority: 1

  WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 8080
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: 
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-VPCID"
  webAppLaunchConfig:
          Type: AWS::AutoScaling::LaunchConfiguration
          Properties:
            ImageId:  !Ref  Amid
            InstanceType: t2.micro
            BlockDeviceMappings:
             - DeviceName: "/dev/sdk"
               Ebs:
                 VolumeSize: '8'
            KeyName: udacitypojectssh
            SecurityGroups: 
             - Ref: webServerSecG
            UserData: !Base64  |
                  #!/bin/bash -ex # your script here
                  sudo apt-get update -y
                  sudo apt-get install apache2 -y
                  sudo systemctl start apache2.service 
                  cd /var/www/html
                  echo "Udacity Demo Web Server Up and Running!" > index.html
      

 